-- Disabled legacy script: do not execute during Postgres init
-- Canonical schema is defined in 01_init.sql and other SOP-compliant migrations.
-- Keep this file empty or remove it from the /docker-entrypoint-initdb.d mount.

-- CREATE TABLE users (
--     id SERIAL PRIMARY KEY,
--     username VARCHAR(50) NOT NULL UNIQUE,
--     password VARCHAR(255) NOT NULL,
--     email VARCHAR(100) NOT NULL UNIQUE,
--     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
-- );

-- CREATE TABLE sales (
--     id SERIAL PRIMARY KEY,
--     item VARCHAR(255) NOT NULL,
--     price DECIMAL(10, 2) NOT NULL,
--     soldDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     owner VARCHAR(255) NOT NULL,
--     negotiatedTerms TEXT
-- );

-- CREATE TABLE product_research (
--     id SERIAL PRIMARY KEY,
--     item VARCHAR(255) NOT NULL,
--     sold_price DECIMAL(10, 2),
--     research_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     user_account_id INT REFERENCES application_account(user_account_id)
-- );

-- -- Table for storing basic item information
-- CREATE TABLE items (
--     id SERIAL PRIMARY KEY,
--     description TEXT NOT NULL,
--     manufacturer VARCHAR(255) DEFAULT 'Unknown',
--     model VARCHAR(255) DEFAULT 'Unknown',
--     serial_number VARCHAR(255) DEFAULT 'Unknown',
--     dimensions VARCHAR(255),
--     weight DECIMAL(10, 2),
--     condition VARCHAR(50),
--     category VARCHAR(100),
--     sku_barcode VARCHAR(100),
--     images TEXT[],
--     specifications TEXT,
--     product_page_link TEXT
-- );

-- DROP TABLE IF EXISTS public.ownership CASCADE;
-- CREATE TABLE public.ownership (
--     id SERIAL PRIMARY KEY,
--     ownership_type VARCHAR(50) NOT NULL,
--     first_name VARCHAR(100),
--     last_name VARCHAR(100),
--     address TEXT,
--     telephone VARCHAR(20),
--     email VARCHAR(100),
--     company_name VARCHAR(255),
--     company_address TEXT,
--     company_telephone VARCHAR(20),
--     company_email VARCHAR(100),
--     assigned_contact_first_name VARCHAR(100),
--     assigned_contact_last_name VARCHAR(100),
--     assigned_contact_telephone VARCHAR(20),
--     assigned_contact_email VARCHAR(100)
-- );

-- DROP TABLE IF EXISTS public.ownershipagreements CASCADE;
-- CREATE TABLE public.ownershipagreements (
--     id SERIAL PRIMARY KEY,
--     ownership_id INT REFERENCES public.ownership(id),
--     commission_percentage DECIMAL(5, 2),
--     minimum_sale_price DECIMAL(10, 2),
--     duration_of_agreement INT,
--     renewal_terms TEXT
-- );

-- -- Table for history logs
-- -- REMOVED legacy HistoryLogs table, use snake_case historylogs instead

-- -- Table for sales history
-- CREATE TABLE public.saleshistory (
--     id SERIAL PRIMARY KEY,
--     item_id INT REFERENCES items(id),
--     sales_channel VARCHAR(255),
--     return_history TEXT,
--     customer_feedback TEXT
-- );

-- -- Table for eBay-specific information
-- -- Create Listing table (merged with eBayInfo fields)
-- DROP TABLE IF EXISTS public.listing CASCADE;
-- CREATE TABLE IF NOT EXISTS public.listing (
--     id SERIAL PRIMARY KEY,
--     title VARCHAR(255) NOT NULL,
--     price DECIMAL(10, 2) NOT NULL,
--     itemId INT NOT NULL REFERENCES Items(id),
--     status VARCHAR(50) NOT NULL,
--     watchers INT,
--     item_condition_description TEXT,
--     payment_method VARCHAR(255),
--     shipping_method TEXT,
--     createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
-- );

-- -- Table for customer details
-- CREATE TABLE public.customerdetails (
--     id SERIAL PRIMARY KEY,
--     purchase_date DATE,
--     purchase_method VARCHAR(255),
--     shipping_preferences TEXT
-- );

-- DROP TABLE IF EXISTS public.financialtracking CASCADE;
-- CREATE TABLE public.financialtracking (
--     id SERIAL PRIMARY KEY,
--     item_id INT REFERENCES items(id),
--     net_proceeds_calculation TEXT
-- );

-- DROP TABLE IF EXISTS public.communicationlogs CASCADE;
-- CREATE TABLE public.communicationlogs (
--     id SERIAL PRIMARY KEY,
--     owner_id INT REFERENCES public.ownership(id),
--     communication_history TEXT,
--     approval_process TEXT
-- );

-- DROP TABLE IF EXISTS public.performancemetrics CASCADE;
-- CREATE TABLE public.performancemetrics (
--     id SERIAL PRIMARY KEY,
--     item_id INT REFERENCES items(id),
--     total_sales DECIMAL(10, 2),
--     number_of_items_sold INT,
--     average_sale_price DECIMAL(10, 2)
-- );

-- DROP TABLE IF EXISTS public.appconfig CASCADE;
-- CREATE TABLE public.appconfig (
--     id SERIAL PRIMARY KEY,
--     config_key VARCHAR(255) NOT NULL UNIQUE,
--     config_value TEXT NOT NULL,
--     data_type VARCHAR(50) NOT NULL,
--     scope VARCHAR(100) DEFAULT 'global',
--     environment VARCHAR(50) DEFAULT 'all',
--     updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
-- );